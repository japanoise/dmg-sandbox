; https://eldred.fr/gb-asm-tutorial/hello-world.htmlINCLUDE "hardware.inc"

SECTION "rom", ROM0[$100]
; $0100 - $0103: Startup handler.
nop
jp main

; $0104 - $0133: The Nintendo Logo.
DB $CE, $ED, $66, $66, $CC, $0D, $00, $0B
DB $03, $73, $00, $83, $00, $0C, $00, $0D
DB $00, $08, $11, $1F, $88, $89, $00, $0E
DB $DC, $CC, $6E, $E6, $DD, $DD, $D9, $99
DB $BB, $BB, $67, $63, $6E, $0E, $EC, $CC
DB $DD, $DC, $99, $9F, $BB, $B9, $33, $3E

; $0134 - $013E: The title, in upper-case letters, followed by zeroes.
DB "HELLO"
DS 6 ; padding

; Null out everything else; rgbfix will take care of it.
REPT $150-$13E
	db 0
ENDR

SECTION "Game Code", ROM0
main:
.waitVBlank:
	ld a, [rLY]
	cp 144 ; Check if the LCD is past VBlank
	jr c, .waitVBlank

	xor a ; ld a, 0 ; We only need to reset a value with bit 7 reset, but 0 does the job
	ld [rLCDC], a

	ld hl, $9000
	ld de, FontTiles
	ld bc, FontTilesEnd - FontTiles
.copyFont:
	ld a, [de] ; Grab 1 byte from the source
	ld [hli], a ; Place it at the destination, incrementing hl
	inc de ; Move to next byte
	dec bc ; Decrement count
	ld a, b ; Check if count is 0, since `dec bc` doesn't update flags
	or c
	jr nz, .copyFont

	ld hl, $9800
	ld de, HelloWorldStr
	call writestring

	; Init display registers
	ld a, %11100100
	ld [rBGP], a

	xor a ; ld a, 0
	ld [rSCY], a
	ld [rSCX], a

	; Shut sound down
	ld [rNR52], a

	; Turn screen on, display background
	ld a, %10000001
	ld [rLCDC], a
.loop:
	nop
	jr .loop

writestring: ; hl = location, de = string
	ld a, [de]
	ld [hli], a
	inc de
	and a ; Check if the byte we just copied is zero
	jr nz, writestring ; Continue if it's not
	ret

SECTION "Font", ROM0
FontTiles:
INCBIN "font.chr"
FontTilesEnd:

SECTION "HW String", ROM0
HelloWorldStr:
	db "Hello World!", 0
